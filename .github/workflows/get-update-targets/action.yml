# Get the needed update targets of an MPR package.
name: "Get Update Targets"
inputs:
  pkgbase:
    type: string
    description: "The MPR package to check"
    required: true
  makedeb_url:
    type: string
    description: "The URL for makedeb (makedeb.org currently). This is passed as an input as GitHub composite actions aren't able to use the 'vars' context."
    required: true
outputs:
  targets:
    description: |
      A JSON array, containing objects consisting of:
      - 'arch' # The architecture that needs updated
      - 'distro' # The distro that needs updated
      - 'image-tag' # The image that'll be used to build the package in 'update-pkg.yml'

      Examples:
      - [{"arch": "amd64", "distro": "jammy", "image-tag": "ubuntu-jammy"}]
      - [{"arch": "amd64", "distro": "bullseye", "image-tag": "debian-bullseye"}]
    value: ${{ steps.list-targets.outputs.TARGETS }}

runs:
  using: composite
  steps:
    - name: Get list of targets
      id: list-targets
      shell: bash
      run: |
        # We overwrite files in /etc/apt during this, so backup the directory for restoration after we're done.
        tmpdir="$(mktemp -d)"
        cp /etc/apt/* "${tmpdir}" -R

        set -eo pipefail
        sudo rm /etc/apt/sources.list.d/*

        DISTROS=('focal' 'jammy' 'lunar' 'bullseye' 'bookworm')
        ARCHS=('amd64' 'arm64')
        OUTPUT='[]'
        LATEST_VERSION="$(curl -s 'https://mpr.${{ inputs.makedeb_url }}/packages-meta-ext-v2.json.gz' | jq -r '.[] | select(.PackageBase=="${{ inputs.pkgbase }}").Version')"

        if [[ "${LATEST_VERSION}" == '' ]]; then
          echo "::error ::Unable to fetch package version from MPR."
          exit 1
        fi

        for distro in "${DISTROS[@]}"; do
          for arch in "${ARCHS[@]}"; do
            echo "Checking '${distro}:${arch}' for updates..."
            echo "deb [arch=all,${arch} signed-by=/usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg] https://proget.${{ inputs.makedeb_url }} prebuilt-mpr ${distro}" | sudo tee /etc/apt/sources.list 1> /dev/null
            
            if ! output="$(sudo apt-get update 2>&1)"; then
              echo "${output}"
              echo "Failed to check '${distro}:${arch}' for updates."
              exit 1
            fi

            # The package lines.
            mapfile -t apt_output < <(apt list '${{ inputs.pkgbase }}' 2> /dev/null | grep '^[a-z/]* ')

            apt_version="$(echo "${apt_output[0]}" | awk '{print $2}')"

            if [[ "${apt_version}" != "${LATEST_VERSION}" ]]; then
              case "${distro}" in
                focal|jammy|lunar) tag="ubuntu-${distro}" ;;
                bullseye|bookworm) tag="debian-${distro}" ;;
              esac

              json="{
                \"arch\": \"${arch}\",
                \"distro\": \"${distro}\",
                \"image-tag\": \"${tag}\"
              }"
              OUTPUT="$(echo "${OUTPUT}" | jq -c ". += [${json}]")"
            fi
          done
        done

        # Restore APT directory and cache.
        echo "Restoring APT cache to previous state..."
        sudo cp "${tmpdir}"/* /etc/apt/ -R
        if ! output="$(sudo apt-get update 2>&1)"; then
          echo "${output}"
          echo "Failed to restore APT cache."
          exit 1
        fi

        echo "TARGETS=${OUTPUT}" >> "${GITHUB_OUTPUT}"