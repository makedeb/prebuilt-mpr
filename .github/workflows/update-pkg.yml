# Update an MPR package.
# 
# Note that this workflow shouldn't ever be called manually, it's only here so
# that GitHub recognizes the workflow. It's purpose is only for internal use
# by the Prebuilt-MPR system.
name: Update Package
run-name: "Update Package: '${{ inputs.pkgbase }}'"
on:
  workflow_dispatch:
    inputs:
      pkgbase:
        required: true
        type: string
      # A JSON array. The array items are objects containing these keys:
      # - 'arch'
      # - 'distro'
      # - 'image-tag'
      targets:
        required: true
        type: string

jobs:
  update-pkg:
    name: Build Package (${{ matrix.target.distro }}:${{ matrix.target.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(inputs.targets) }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: pkg
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker config
        run: |
          # The 'Maximize build space' step only makes the extra storage
          # available to our workspace directory. Our Docker container
          # will produce a lot of storage, so store all of that stuff in
          # the workspace directory too.
          echo "{\"data-root\":\"${PWD}/docker\"}" | sudo tee /etc/docker/daemon.json 1> /dev/null
          sudo systemctl restart docker
      - name: Build package
        run: |
          chmod a+rwx pkg/
          cd pkg/
          echo "${SCRIPT}" | docker run \
            -i \
            -v "${PWD}:/home/makedeb" \
            --platform "linux/${{ matrix.target.arch }}" \
            "proget.${{ vars.HW_URL }}/docker/makedeb/makedeb:${{ matrix.target.image-tag }}"
        env:
          SCRIPT: |
            export "DEBIAN_FRONTEND=${{ vars.DEBIAN_FRONTEND }}"
            export CARGO_NET_GIT_FETCH_WITH_CLI=true # workaround for https://github.com/rust-lang/cargo/issues/10583.
            sudo chown 'makedeb:makedeb' "${HOME}" -R

            # Install Prerequisites.
            sudo apt-get update
            sudo -E apt-get install git gpg locales-all wget -y
            export LANG='en_US.UTF-8'

            # Set up the Prebuilt-MPR.
            wget -qO - 'https://proget.makedeb.org/debian-feeds/prebuilt-mpr.pub' | gpg --dearmor | sudo tee /usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg 1> /dev/null
            echo "deb [arch=all,$(dpkg --print-architecture) signed-by=/usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg] https://proget.makedeb.org prebuilt-mpr $(lsb_release -cs)" | sudo tee /etc/apt/sources.list.d/prebuilt-mpr.list
            sudo apt-get update

            # Set up the makedeb config. The stock makedeb config has
            # issues when building on non-amd64 machines. This change
            # fixes that until a fix is implemented in makedeb.
            (
            cat << EOF
            CARCH="$(uname -m)"
            DLAGENTS=(
              'file::/usr/bin/curl -gqC - -o %o %u'
              'ftp::/usr/bin/curl -gqfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
              'http::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
              'https::/usr/bin/curl -gqb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
              'rsync::/usr/bin/rsync --no-motd -z %u %o'
              'scp::/usr/bin/scp -C %u %o'
            )
            VCSCLIENTS=(
              'bzr::bzr'
              'fossil::fossil'
              'git::git'
              'hg::mercurial'
              'svn::subversion'
            )
            BUILDENV=(
              '!distcc'
              'color'
              '!ccache'
              'check'
              '!sign'
            )
            OPTIONS=(
              'strip'
              'docs'
              '!libtool'
              '!staticlibs'
              'emptydirs'
              'zipman'
              'purge'
              '!debug'
              '!lto'
            )
            INTEGRITY_CHECK=(sha256)
            STRIP_BINARIES="--strip-all"
            STRIP_SHARED="--strip-unneeded"
            STRIP_STATIC="--strip-debug"
            MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
            DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
            PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
            DBGSRCDIR="/usr/src/debug"
            COMPRESSGZ=(gzip -c -f -n)
            COMPRESSBZ2=(bzip2 -c -f)
            COMPRESSXZ=(xz -c -z -)
            COMPRESSZST=(zstd -c -z -q -)
            COMPRESSLRZ=(lrzip -q)
            COMPRESSLZO=(lzop -q)
            COMPRESSZ=(compress -c -f)
            COMPRESSLZ4=(lz4 -q)
            COMPRESSLZ=(lzip -c -f)
            PKGEXT='.pkg.tar.zst'
            SRCEXT='.src.tar.gz'
            EOF
            ) | sudo tee /etc/makepkg.conf 1> /dev/null

            makedeb -s --no-confirm --pass-env
      - name: Upload built packages
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.target.distro }}-${{ matrix.target.arch }}"
          path: 'pkg/*.deb'
  set-status:
    name: Set Pending Status
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    needs: [update-pkg]
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set status
        id: issue
        run: |
          pkg="$(echo "${{ github.ref_name }}" | sed 's|^pkg-update/||')"
          number="$(gh issue list | grep "\`${pkg}\`" | awk '{print $1}')"
          body="$(gh issue view "${number}" --json body -q '.body' | sed "s|.*Building...|:memo: Pending publish approval...|")"
          gh issue edit "${number}" -b "${body}"
  publish-pkgs:
    name: Publish Packages
    runs-on: ubuntu-latest
    environment: Prebuilt-MPR
    if: ${{ !cancelled() }}
    needs: [set-status]
    env:
      GH_TOKEN: ${{ github.token }}
      GH_REPO: ${{ github.repository }}
    steps:
      - name: Setup Prebuilt-MPR APT repository
        uses: makedeb/setup-makedeb@main
        with:
          makedeb-repo: false
          pbmpr-repo: true
      - name: Install needed dependencies
        run: sudo apt-get install pg -y
      - name: Set status
        id: issue
        run: |
          pkg="$(echo "${{ github.ref_name }}" | sed 's|^pkg-update/||')"
          number="$(gh issue list | grep "\`${pkg}\`" | awk '{print $1}')"
          body="$(gh issue view "${number}" --json body -q '.body' | sed "s|.*Pending publish approval...|:package: Deploying...|")"
          gh issue edit "${number}" -b "${body}"
      - name: Download built packages
        uses: actions/download-artifact@v3
      - name: Publish packages
        run: |
          for dir in *; do
            component="$(echo "${dir}" | grep -o '^[^-]*')"

            for deb in "${dir}"/*; do
              echo "Uploading '${deb}'..."
              pg upload-deb prebuilt-mpr "${component}" "${deb}"
            done
          done
        env:
          PROGET_SERVER: "https://proget.{{ vars.HW_URL }}"
          PROGET_TOKEN: "${{ secrets.PROGET_TOKEN }}"
  update-status:
    name: Update Status
    runs-on: ubuntu-latest
    needs: publish-pkgs
    if: always() || cancelled()
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get issue number
        id: issue
        run: |
          pkg="$(echo "${{ github.ref_name }}" | sed 's|^pkg-update/||')"
          gh issue list | grep "\`${pkg}\`" | awk '{print $1}' | echo "NUMBER=$(cat)" >> "${GITHUB_OUTPUT}"
      - name: Set status
        run: |
          if [[ "${{ needs.publish-pkgs.result }}" == 'failure' || "${{ needs.publish-pkgs.result }}" == 'skipped' ]]; then
            msg=':x: Failed'
          elif [[ "${{ needs.publish-pkgs.result }}" == 'cancelled' ]]; then
            msg=':x: Cancelled'
          elif [[ "${{ needs.publish-pkgs.result }}" == 'success' ]]; then
            msg=':tada: Deployed'
          else
            echo 'Unknown result type: ${{ needs.publish-pkgs.result }}' 1>&2
            exit 1
          fi
          body="$(gh issue view '${{ steps.issue.outputs.NUMBER }}' --json body -q '.body' | sed -e "s|.*Building...|${msg}|"  -e "s|.*Pending publish.*|${msg}|" -e "s|.*Deploying...|${msg}|")"
          gh issue edit "${{ steps.issue.outputs.NUMBER }}" -b "${body}"

          if [[ "${{ needs.publish-pkgs.result }}" == 'success' ]]; then
            gh issue close "${{ steps.issue.outputs.NUMBER }}"
          fi